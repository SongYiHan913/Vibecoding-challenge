[
  {
    "id": "tech-java-001",
    "type": "technical",
    "format": "multiple-choice",
    "difficulty": "medium",
    "experienceLevel": "junior",
    "field": "java",
    "category": "java",
    "question": "Java의 접근 제어자 중 같은 패키지 내에서만 접근 가능한 것은?",
    "options": [
      "public",
      "private",
      "protected",
      "package-private (default)"
    ],
    "correctAnswer": 3,
    "points": 10,
    "tags": ["접근제어자", "기본문법"],
    "explanation": "package-private(default)는 같은 패키지 내의 클래스에서만 접근 가능합니다."
  },
  {
    "id": "tech-mariadb-001",
    "type": "technical",
    "format": "essay",
    "difficulty": "hard",
    "experienceLevel": "senior",
    "field": "java",
    "category": "mariadb",
    "question": "MariaDB에서 대용량 데이터 처리 시 성능 최적화를 위한 방법들을 3가지 이상 설명하시오.",
    "correctAnswerText": "인덱스 최적화를 통해 조회 성능을 향상시키고, 파티셔닝을 활용하여 데이터를 분산 저장하며, 쿼리 최적화 및 커넥션 풀 관리를 통해 전체적인 성능을 개선할 수 있습니다.",
    "requiredKeywords": ["인덱스", "파티셔닝", "쿼리최적화", "커넥션풀"],
    "points": 15,
    "tags": ["성능최적화", "데이터베이스"]
  },
  {
    "id": "tech-csharp-001",
    "type": "technical",
    "format": "multiple-choice",
    "difficulty": "easy",
    "experienceLevel": "junior",
    "field": "csharp",
    "category": "csharp",
    "question": "C#에서 nullable 타입을 선언하는 올바른 방법은?",
    "options": [
      "int nullable = null;",
      "int? nullable = null;",
      "nullable int = null;",
      "int nullable? = null;"
    ],
    "correctAnswer": 1,
    "points": 8,
    "tags": ["nullable", "기본문법"]
  },
  {
    "id": "tech-mssql-001",
    "type": "technical",
    "format": "essay",
    "difficulty": "medium",
    "experienceLevel": "senior",
    "field": "csharp",
    "category": "mssql",
    "question": "MS SQL Server에서 트랜잭션 격리 수준(Isolation Level)의 종류와 각각의 특징을 설명하시오.",
    "correctAnswerText": "READ UNCOMMITTED는 커밋되지 않은 데이터를 읽을 수 있어 Dirty Read 발생 가능, READ COMMITTED는 커밋된 데이터만 읽어 Dirty Read 방지, REPEATABLE READ는 반복 읽기 보장, SERIALIZABLE은 가장 높은 격리 수준으로 완전한 직렬화를 보장합니다.",
    "requiredKeywords": ["READ UNCOMMITTED", "READ COMMITTED", "REPEATABLE READ", "SERIALIZABLE"],
    "points": 12,
    "tags": ["트랜잭션", "격리수준", "데이터베이스"]
  },
  {
    "id": "tech-html-001",
    "type": "technical",
    "format": "multiple-choice",
    "difficulty": "easy",
    "experienceLevel": "junior",
    "field": "common",
    "category": "html",
    "question": "HTML5에서 시맨틱 태그가 아닌 것은?",
    "options": [
      "<header>",
      "<nav>",
      "<div>",
      "<section>"
    ],
    "correctAnswer": 2,
    "points": 5,
    "tags": ["HTML5", "시맨틱태그"]
  },
  {
    "id": "tech-js-001",
    "type": "technical",
    "format": "essay",
    "difficulty": "hard",
    "experienceLevel": "senior",
    "field": "common",
    "category": "javascript",
    "question": "JavaScript의 호이스팅(Hoisting)과 클로저(Closure)의 개념을 설명하고, 실제 코드 예시와 함께 두 개념이 어떻게 상호작용하는지 설명하시오.",
    "correctAnswerText": "호이스팅은 변수와 함수 선언이 해당 스코프의 최상단으로 끌어올려지는 현상이고, 클로저는 함수가 선언된 렉시컬 환경을 기억하여 외부 변수에 접근할 수 있는 기능입니다. 두 개념은 함수 스코프와 변수 생명주기에서 상호작용합니다.",
    "requiredKeywords": ["호이스팅", "클로저", "스코프", "렉시컬환경"],
    "points": 20,
    "tags": ["호이스팅", "클로저", "고급개념"]
  },
  {
    "id": "personality-001",
    "type": "personality",
    "format": "essay",
    "difficulty": "medium",
    "experienceLevel": "junior",
    "question": "팀 프로젝트에서 동료와 의견 충돌이 발생했을 때, 어떻게 해결하시겠습니까? 구체적인 상황과 해결 방법을 설명해주세요.",
    "correctAnswerText": "상대방의 의견을 경청하고 서로의 관점을 이해한 후, 데이터와 근거를 바탕으로 객관적으로 논의하여 팀의 목표에 가장 적합한 방향으로 합의점을 찾겠습니다. 필요시 팀 리더나 상급자의 조언을 구하겠습니다.",
    "requiredKeywords": ["경청", "객관적", "합의", "팀워크"],
    "points": 10,
    "tags": ["협업", "갈등해결"]
  },
  {
    "id": "personality-002",
    "type": "personality",
    "format": "essay",
    "difficulty": "easy",
    "experienceLevel": "junior",
    "question": "회사의 보안 정책을 준수하는 것이 왜 중요한지 설명하고, 일상 업무에서 실천할 수 있는 방법을 제시해주세요.",
    "correctAnswerText": "회사 보안 정책은 중요한 정보 자산을 보호하고 법적 리스크를 예방하기 위해 필수적입니다. 비밀번호 정기 변경, 화면 잠금 습관화, 개인정보 취급 시 주의, USB 등 외부 저장매체 사용 제한 준수 등을 실천하겠습니다.",
    "requiredKeywords": ["정보보호", "비밀번호", "화면잠금", "개인정보"],
    "points": 8,
    "tags": ["보안의식", "정보보호"]
  },
  {
    "id": "problem-solving-001",
    "type": "problem-solving",
    "format": "essay",
    "difficulty": "hard",
    "experienceLevel": "senior",
    "question": "운영 중인 웹 애플리케이션에서 갑자기 응답 속도가 현저히 느려졌습니다. 사용자들의 불만이 급증하고 있는 상황에서, 문제를 체계적으로 분석하고 해결하는 과정을 단계별로 설명하세요.",
    "correctAnswerText": "1단계: 모니터링 도구로 시스템 리소스와 로그 확인, 2단계: 데이터베이스 쿼리 성능과 커넥션 상태 점검, 3단계: 네트워크 상태와 외부 API 응답 시간 확인, 4단계: 애플리케이션 코드에서 병목 지점 식별, 5단계: 임시 조치 적용 후 근본 원인 해결, 6단계: 재발 방지를 위한 모니터링 체계 강화",
    "requiredKeywords": ["모니터링", "로그분석", "데이터베이스", "병목지점", "근본원인"],
    "points": 25,
    "tags": ["성능최적화", "문제해결", "시스템분석"]
  },
  {
    "id": "problem-solving-002",
    "type": "problem-solving",
    "format": "essay",
    "difficulty": "medium",
    "experienceLevel": "junior",
    "question": "개발한 기능이 테스트 환경에서는 정상 동작하지만 운영 환경에서 오류가 발생합니다. 이런 상황에서 원인을 찾고 해결하기 위한 접근 방법을 설명하세요.",
    "correctAnswerText": "환경 간 차이점을 체계적으로 비교분석해야 합니다. 설정 파일, 데이터베이스 스키마, 라이브러리 버전, 환경 변수 등을 확인하고, 운영 환경의 로그를 상세히 분석하여 테스트 환경에서 재현 가능한 조건을 찾아 문제를 해결하겠습니다.",
    "requiredKeywords": ["환경차이", "설정파일", "로그분석", "재현"],
    "points": 15,
    "tags": ["환경관리", "디버깅", "문제해결"]
  }
] 